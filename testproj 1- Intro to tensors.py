import tensorflow as tf
import time

tfv = tf.zeros([5,5,5,5])
#tfv = tf.zeroes([no1, no2, no3, no4])
#Right most defines how many elements in each list, then the next defines indented list, so on so forth. Example: This would run:
'''
tf.Tensor(
[[[[0. 0. 0. 0. 0.]---amount of numbers in each list is decided by no4, or right most number
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]]                                                    |
                                                                        |
  [[0. 0. 0. 0. 0.]  |                                                  |
   [0. 0. 0. 0. 0.]  |                                                  |
   [0. 0. 0. 0. 0.]  |-- amount of list in this nest decided by no3     |
   [0. 0. 0. 0. 0.]  |                                                  |
   [0. 0. 0. 0. 0.]] |                                                  |
                                                                        |
  [[0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |--------amount of lists in this nest dexided by no2, and so on. 
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]]                                                    |
                                                                        |
  [[0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]]                                                    |
                                                                        |
  [[0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]                                                     |
   [0. 0. 0. 0. 0.]]]                                                   |


 [[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]


 [[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]


 [[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]


 [[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]], shape=(5, 5, 5, 5), dtype=float32)
'''
print(tfv)

#Reshaping to just have one list with 625 values
tfvr = tf.reshape(tfv, [625])
print(tfvr)

tfvr = tf.reshape(tfv,[-1, 125])
#put -1 wherever you want the tensor to autocalculate the value to reshape. Cannot put two -1 in one tensor. 
print(tfvr)


time.sleep(100000000)
